// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
	Not16 (in=x, out=Notx);
	Not16 (in=y, out=Noty);
	Not16 (in=false, out=Not0);
	Mux4Way16 (a=x, b=false, c=Notx, d=Not0, sel[0]=zx, sel[1]=nx, out=outx);
	Mux4Way16 (a=y, b=false, c=Noty, d=Not0, sel[0]=zy, sel[1]=ny, out=outy);
	Add16 (a=outx, b=outy, out=outadd);
	And16 (a=outx, b=outy, out=outand);
	Mux16 (a=outand, b=outadd, sel=f, out=outf);
	Not16 (in=outf, out=Notoutf);
	Mux16 (a=outf, b=Notoutf, sel=no, out=final);//can use xor to do this fun

	Mux16(a=final, b=false, sel=false, out=out);
	Or (a=final[0], b=final[1], out=out1);
	Or (a=out1, b=final[2], out=out2);
	Or (a=out2, b=final[3], out=out3);
	Or (a=out3, b=final[4], out=out4);
	Or (a=out4, b=final[5], out=out5);
	Or (a=out5, b=final[6], out=out6);
	Or (a=out6, b=final[7], out=out7);
	Or (a=out7, b=final[8], out=out8);
	Or (a=out8, b=final[9], out=out9);
	Or (a=out9, b=final[10], out=out10);
	Or (a=out10, b=final[11], out=out11);
	Or (a=out11, b=final[12], out=out12);
	Or (a=out12, b=final[13], out=out13);
	Or (a=out13, b=final[14], out=out14);
	Or (a=out14, b=final[15], out=zrout);
    Not(in=zrout, out=zr);//can use Or16Way,but the simulator cant load the chip.

	And (a=final[15], b=true, out=ng);
}
